package com.camelcase.taskapi.filter;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.stream.Collectors;

//@Component
public class RequestLoggingFilter implements Filter {

    private static final Logger logger = LoggerFactory.getLogger(RequestLoggingFilter.class);

    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        if (request instanceof HttpServletRequest httpServletRequest) {
            // Read the request body to check if it's being consumed
            String body = null;
            try (BufferedReader reader = httpServletRequest.getReader()) {
                body = reader.lines().collect(Collectors.joining("\n"));
            } catch (Exception e) {
                logger.error("Failed to read request body", e);
            }

            // Log request details
            logger.info("üîç [RequestLoggingFilter] Path: {} | Method: {}", 
                        httpServletRequest.getRequestURI(), httpServletRequest.getMethod());
            logger.info("üîç [RequestLoggingFilter] Raw JSON: {}", body);

            // Proceed with the filter chain
            chain.doFilter(request, response);
        } else {
            chain.doFilter(request, response);
        }
    }
}
