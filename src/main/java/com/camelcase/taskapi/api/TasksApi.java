/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.camelcase.taskapi.api;

import com.camelcase.taskapi.model.Delete200Response;
import com.camelcase.taskapi.model.ErrorResponse;
import com.camelcase.taskapi.model.Task;
import com.camelcase.taskapi.model.TaskCreateRequest;
import com.camelcase.taskapi.model.TaskPage;
import com.camelcase.taskapi.model.TaskUpdateRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-13T11:38:43.993336073Z[Etc/UTC]", comments = "Generator version: 7.13.0-SNAPSHOT")
@Validated
@Tag(name = "tasks", description = "the tasks API")
public interface TasksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /tasks : Create a new task
     * Add a new task to the system.
     *
     * @param taskCreateRequest  (required)
     * @return Task created successfully. (status code 201)
     *         or Validation error. (status code 400)
     */
    @Operation(
        operationId = "create",
        summary = "Create a new task",
        description = "Add a new task to the system.",
        responses = {
            @ApiResponse(responseCode = "201", description = "Task created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "400", description = "Validation error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tasks",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Task> create(
        @Parameter(name = "TaskCreateRequest", description = "", required = true) @Valid @RequestBody TaskCreateRequest taskCreateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dueDate\" : \"2000-01-23\", \"description\" : \"description\", \"id\" : \"id\", \"title\" : \"title\", \"taskStatus\" : \"pending\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /tasks/{id} : Delete a task
     * Permanently remove a task by its ID (hard delete).
     *
     * @param id  (required)
     * @return Task deleted successfully. (status code 200)
     *         or Task not found. (status code 404)
     */
    @Operation(
        operationId = "delete",
        summary = "Delete a task",
        description = "Permanently remove a task by its ID (hard delete).",
        responses = {
            @ApiResponse(responseCode = "200", description = "Task deleted successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Delete200Response.class))
            }),
            @ApiResponse(responseCode = "404", description = "Task not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tasks/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Delete200Response> delete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"success\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tasks : Get all tasks
     * Retrieve a paginated list of all tasks with optional filters.
     *
     * @param taskStatus Filter tasks by taskStatus. (optional)
     * @param page Pagination - page number. (optional, default to 1)
     * @param size Pagination - number of tasks per page. (optional, default to 10)
     * @return List of tasks retrieved successfully. (status code 200)
     */
    @Operation(
        operationId = "findAll",
        summary = "Get all tasks",
        description = "Retrieve a paginated list of all tasks with optional filters.",
        responses = {
            @ApiResponse(responseCode = "200", description = "List of tasks retrieved successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskPage.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tasks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TaskPage> findAll(
        @Parameter(name = "taskStatus", description = "Filter tasks by taskStatus.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "taskStatus", required = false) String taskStatus,
        @Parameter(name = "page", description = "Pagination - page number.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Integer page,
        @Parameter(name = "size", description = "Pagination - number of tasks per page.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "size", required = false, defaultValue = "10") Integer size
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"totalItems\" : 6, \"totalPages\" : 0, \"tasks\" : [ { \"dueDate\" : \"2000-01-23\", \"description\" : \"description\", \"id\" : \"id\", \"title\" : \"title\", \"taskStatus\" : \"pending\" }, { \"dueDate\" : \"2000-01-23\", \"description\" : \"description\", \"id\" : \"id\", \"title\" : \"title\", \"taskStatus\" : \"pending\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tasks/{id} : Get a specific task
     * Retrieve details of a task by its ID.
     *
     * @param id  (required)
     * @return Task details retrieved successfully. (status code 200)
     *         or Task not found. (status code 404)
     */
    @Operation(
        operationId = "get",
        summary = "Get a specific task",
        description = "Retrieve details of a task by its ID.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Task details retrieved successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "404", description = "Task not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tasks/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Task> get(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dueDate\" : \"2000-01-23\", \"description\" : \"description\", \"id\" : \"id\", \"title\" : \"title\", \"taskStatus\" : \"pending\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /tasks/{id} : Update a task
     * Modify an existing task.
     *
     * @param id  (required)
     * @param taskUpdateRequest  (required)
     * @return Task updated successfully. (status code 200)
     *         or Validation error. (status code 400)
     *         or Task not found. (status code 404)
     */
    @Operation(
        operationId = "update",
        summary = "Update a task",
        description = "Modify an existing task.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Task updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "400", description = "Validation error.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Task not found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tasks/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Task> update(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "TaskUpdateRequest", description = "", required = true) @Valid @RequestBody TaskUpdateRequest taskUpdateRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"dueDate\" : \"2000-01-23\", \"description\" : \"description\", \"id\" : \"id\", \"title\" : \"title\", \"taskStatus\" : \"pending\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"details\" : [ \"details\", \"details\" ], \"error\" : \"error\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
